<!DOCTYPE>
<html class="no-js">
<head>
<!-- Purpose: develop a game using kinetic.js, html 5 and existing javascript frameworks-->
<!-- Coded by: twitter @ginhanlabs -->
<!-- Website: http://ginhanlabs.blogspot.com -->
 
    <script src="scripts/jquery-1.8.2.min.js" type="text/javascript"></script>
    <script src="scripts/kinetic-v4.0.4.js" type="text/javascript"></script>
    <title>cmath</title>
    <style type="text/css">
      
    @media screen
    {
        .hide {display:none}
         .absolute{position:absolute;}
         .alignCenter {text-align:center}
         .menu a {border:1px solid red;padding:1em;display:block;width:5em;text-decoration:none;margin:auto;margin-bottom:.6em;}
         #btnCalc {left:545px;top:455px;}
         #keyPadRow{left:410px;top:340px;}
         .numKeys {padding:.5em;margin-left:.2em}
  	}
  	
    </style>
	<!--[if IE]>
	  <style>
	  		#keyPadRow {left:430px}
	  </style>
	<![endif]-->


    <script type="text/javascript">
    	var character, face, munchingFace, stage, oX, oY;
    	var Feedbacks, txtMathProblem, txtAnswer, calcBtn;
    	var imgAssets = {};
        var snackArray = new Array();
        var nPadArray = new Array();
        var mathProblemLayer = new Kinetic.Layer();
        var FeedbackLayer = new Kinetic.Layer();
        var snackLayer = new Kinetic.Layer();
        var characterLayer = new Kinetic.Layer();
        var nPadLayer = new Kinetic.Layer();
        var txtAnswerLayer = new Kinetic.Layer();
        
         	var btn;
        
       var mathObj = {
            x: 365, y: 40,
            ops : "",
            num1 : "", num2 : "",
            level : 1,
            score : 0,
           // counter : 0,
            answer : 0,
            eaten    : 0,
            controlBtnX : 415, controlBtnY : 395,
            nPress: "",
            numClicks : 0, maxClicks : 10 // txtAnswer can't have more than 10 digit
            
        }
        
       var imgSources = [
 			{id :"snackImage", fileSrc:"images/snack.png", width:57,height:56, originX:0, originY:0},
 			{id:"snackImage2", fileSrc :"images/snack2.png", width:57,height:56, originX:0, originY:0},
 			{id:"clearImage", fileSrc :"images/buttonClear.png", width:45, height: 44, originX:mathObj.controlBtnX, originY:mathObj.controlBtnY},
 			{id:"jarImage", fileSrc: "images/cookieJar.png",width:90,height:108, originX:200, originY:300},
 			{id:"nextImage", fileSrc :"images/buttonNext.png",width:45, height: 44, originX:mathObj.controlBtnX + 280, originY:mathObj.controlBtnY},
 			{id:"faceImage", fileSrc :"images/face.gif",width:150, height:132, originX:55, originY:50},
 			{id :"munchingFaceImage", fileSrc :"images/faces.gif",width:150,height:132, originX:55, originY:50}, 
 			{id:"characterImage", fileSrc:"images/character.gif", width:240, height: 334, originX:50, originY:14},
 			{id: "calcImage", fileSrc:"images/snack.png", width:100,height:50, origin: mathObj.controlBtnX + 100, originY:mathObj.controlBtnY}
 		]
    
        function LoadImages(){
            var cnt = 0;
             for (var src in imgSources) {
             var sId = imgSources[src].id;
                 imgAssets[sId] = new Image();
                 imgAssets[sId].id = imgSources[src].id;
                 imgAssets[sId].src =  imgSources[src].fileSrc;
                 imgAssets[sId].width = imgSources[src].width;
                 imgAssets[sId].height = imgSources[src].height;
               	 imgAssets[sId].originX = imgSources[src].originX;
				 imgAssets[sId].originY = imgSources[src].originY;
				
           		$("#imageHolder").append(imgAssets[sId]);
             }              
           }  
 
     function Init() {
 			stage = new Kinetic.Stage({
                width: 800,
                height: 500,
                container: "canvasContainer"
            });
 			
 		   DoBackground();
           setCharacter();
           SetJar();
           SetAnswerArea();
           DoMath();
           SetFeedbackBox();
           stage.draw();
        }
        
 
 	function SetJar() {
           var jar = makeImage(imgAssets.jarImage)
            characterLayer.add(jar);
            stage.add(characterLayer);
        }
     
        function BuildControls(){
        	var inputKey;
       		for (var k=0; k <=9; k++){
      			 inputKey = $('<input>', {
                    id: 'numKey' + k,
                    type: 'button',
                    value: k,
                    class : "numKeys",
                    click: function(e){
                      
                         if (mathObj.numClicks >= mathObj.maxClicks){
                           mathObj.numClicks = 0;
                           txtAnswer.setText(this.value);
                        }
                        else
                        {
                            mathObj.numClicks++;
                            txtAnswer.setText(txtAnswer.getText() + this.value);
                         }
                        stage.draw();
                    }
                });
               $("#keyPadRow").append(inputKey);
            }
             
            // clearButton
            var buttonClear = makeImage(imgAssets.clearImage)
            txtAnswerLayer.add(buttonClear);
            stage.add(txtAnswerLayer);
            buttonClear.on("click",function(){
                txtAnswer.setText("");
                mathObj.numClicks = 0;
                stage.draw();
            })
            
            // next button
            var buttonNext = makeImage(imgAssets.nextImage);
            txtAnswerLayer.add(buttonNext);
            stage.add(txtAnswerLayer);
            buttonNext.on("click",function(){
                ClearSnacks();
            })
              
        }

        function SetAnswerArea() {
        	txtAnswer = GenerateText("ans","", 477, 390, "brown", 20, "bold", 200);
        	txtAnswer.setPadding(10);
        	txtAnswer.setHeight(45);
        	txtAnswer.setStrokeWidth(1);
        	txtAnswer.setFill("White");
        	txtAnswerLayer.add(txtAnswer);
        	stage.add(txtAnswerLayer);
        	BuildControls();
         }
 
        function SetSnacks2(amount, amount2) {
         	var dy = mathObj.y;
	        var maxPerRow = 7;
	        var tempImg = new Image();
	        var startingX = dx = mathObj.x;
	        var indx = 0;
	        var snackName = "";
         
            for (var z = amount; z > 0; z--) {
                if (indx % maxPerRow == 0) {
                        dy = dy + snackImage.height + 3;
                        dx = startingX;
                    }
                    else {
                        dx = dx + snackImage.width + 4;
                    }
                    
                if (z <= amount2) {
                    tempImg = imgAssets.snackImage2;
                    amount2--;
                    snackName = "jarsnack" + z;
                }
                else {
                    tempImg = imgAssets.snackImage;
                    snackName = "snack" + z;
                }
               
            snackArray[z] = new Kinetic.Image({
                    id: snackName,
                    x: dx,
                    y: dy,
                    origX : dx,
                    origY : dy,
                    image: tempImg,
                    draggable: false,
                  
                });
           
                snackLayer.add(snackArray[z]);
                stage.add(snackLayer);
               indx++;
            }
          }
 
        function setCharacter() {
      		character = makeImage(imgAssets.characterImage); 
         	character.on("mouseout", function(){
                munchingFace.hide();
                face.show();
         });
       
          face = makeImage(imgAssets.faceImage); 
           
         var animations = {
           FeedMe: [{
                x: 2,
                y: 160,
                 width: 150,
                 height: 132
            },
            {
                x: 175,
                y: 2,
                 width: 150,
                 height: 132
            }
            ,
            {
                x: 175,
                y: 160,
                 width: 150,
                 height: 132
            }
            ]
          }
 
 		  munchingFace = new Kinetic.Sprite({
                image: imgAssets.munchingFaceImage,
                x: imgAssets.munchingFaceImage.originX,
                y: imgAssets.munchingFaceImage.originY,
                width: imgAssets.munchingFaceImage.width,
                height: imgAssets.munchingFaceImage.height,
                animation: 'FeedMe',
                animations: animations
            });
 
          	characterLayer.add(character);
            stage.add(characterLayer);  
            characterLayer.add(face);
            stage.add(characterLayer);
            characterLayer.add(munchingFace);
            stage.add(characterLayer);
            munchingFace.start();
            munchingFace.hide();  
        }
 
        function SetFeedbackBox(){
         Feedbacks = GenerateText("feedback","", 200, 100, "blue", 30, "bold", 400);
         FeedbackLayer.add(Feedbacks);
         stage.add(FeedbackLayer);
        }
       
        function DoBackground() {
            var bg = new Kinetic.Rect({
                height: 500,
                width: 445,
                x: 355,
                y: 0,
                fill: "#cccccc"
            });
            var bgLayer = new Kinetic.Layer();
            bgLayer.add(bg);
            stage.add(bgLayer);
            
            // container to display math equation
            txtMathProblem = GenerateText("mathProb","", 400, 15, "green", 36, "bold", 400);
            mathProblemLayer.add(txtMathProblem);
            stage.add(mathProblemLayer);
        }
 
         function DoMath() {
            mathObj.num1 = GenerateRandomNum();
            mathObj.num2 = GenerateRandomNum();
            mathObj.answer = 0;
           
            switch (mathObj.ops) {
                case "+":
                    {
                 mathObj.answer = mathObj.num1 + mathObj.num2;
                        SetSnacks2(mathObj.num1 + mathObj.num2, 0);
                        break;
                    }
                case "-":
                    {
                        if (mathObj.num2 > mathObj.num1) {
                            var tmp = mathObj.num1;
                            mathObj.num1 = mathObj.num2;
                            mathObj.num2 = tmp;
                        }
 
                        if (mathObj.num2 == mathObj.num1) {
                            mathObj.num1++;
                        }
                        mathObj.answer = mathObj.num1 - mathObj.num2;
                        SetSnacks2(mathObj.num1, mathObj.num2);
                        break;
                    }
                case "*":
                    {
                        mathObj.answer = mathObj.num1 * mathObj.num2;
                        SetSnacks2(mathObj.num1 * mathObj.num2, "");
                        break;
                    }
                case "/":
                    {
                        break;
                    }
                default:
                    {
                        break;
                    }
                // mathObj.counter++;
            }
 
            var txtStr = mathObj.num1 + " " + mathObj.ops + " " + mathObj.num2;
           txtMathProblem.setText(txtStr);
            mathProblemLayer.moveToTop();
            stage.draw();
        }
 
       function ClearSnacks() {
	        mathObj.eaten = 0;
	        snackLayer.remove();
	        face.show();
	        mathObj.numClicks = 0;
	        txtMathProblem.setText("");
	        txtAnswer.setText("");
            $("#btnCalc").removeAttr("disabled");
            DoMath();
            
        }
 
       function CheckInJar(snack) {
       	   var canEat = false;
           var putBack = snack.getId().substring(0, 3);
                  // put these back into jar
                if ((snack.attrs.x > 200 && snack.attrs.x < 262 && snack.attrs.y > 300 && snack.attrs.y < 382) && putBack == "jar"){
                    	snack.hide();
                        snack.setDraggable(false);
                        canEat = true;
                }
                // eat these
                if ((snack.attrs.x > 39 && snack.attrs.x < 185 && snack.attrs.y > 90 && snack.attrs.y < 147) && putBack =="sna") {
                	munchingFace.show();
                    face.hide();
					snack.hide();
                    snack.setDraggable(false);
                    canEat = true;
				}
			return canEat;
 		 }
      
         function CheckAnswer() {
             if (mathObj.answer == txtAnswer.getText()) {
             $("#btnCalc").attr("disabled", "disabled");
               Feedbacks.setText("That's right");
             
                for (var s = 1; s < snackArray.length; s++) {
                 snackArray[s].setDraggable(true);
                 
               	 snackArray[s].on('mousedown',function(){
               	 	oX = this.getX();
                 	oY = this.getY();
               	 })
               	
                 snackArray[s].on('dragend', function(){
                 	if (CheckInJar(this)){
                     	mathObj.eaten++;
                     	// if subtraction, then need to compare eaten with 1st number of equation
                     	if (mathObj.ops == "-" && (mathObj.eaten == mathObj.num1)){
                     		ClearSnacks();
                     	}
                     	else
	                     	if (mathObj.ops == "+" && (mathObj.eaten == mathObj.answer)){
	                     		ClearSnacks();
	                     	}
                     }
                     else {
                     	// put back in position
                     	this.setPosition(oX,oY);
                     	stage.draw();
                     	
                     }
                  });
                }
             }
            else {
             Feedbacks.setText("Sorry, try again");
             }
           
             FeedbackLayer.moveToTop();
             stage.draw();
            
       var timer = setTimeout(function () {
       Feedbacks.setText("");
       txtAnswer.setText("");
       stage.draw();
       }, 1000);
       clearTimeOut(timer);
         }
         
  		function makeImage(imgObj){
	   		 var KI = new Kinetic.Image({
	            image : imgObj,
	            id: imgObj.id,
	             x: imgObj.originX,
	             y: imgObj.originY,
	            width: imgObj.width,
	            height: imgObj.height
	         });
	         	return KI;
         }
         
         
        function GenerateText(tID,txtStr, dx, dy, fColor, fSize, fStyle, fWidth) {
	      	return new Kinetic.Text({
	      	id: tID,
            x: dx,
            y: dy,
            text: txtStr,
            fontSize: fSize,
            fontStyle: fStyle,
            fontFamily: "arial",
            textFill: fColor,
            width: fWidth,
            align: 'center',
            image: true
         });
 
        }
        function GenerateRandomNum() {
            // no zeros - redo for level 1?
            return Math.round(Math.random() * (mathObj.level * 3) + 1 );
        }
 
        $(document).ready(function () {
        	LoadImages();
        	$(".mainMenu a").click(function () {
                mathObj.ops = $(this).attr("rel");
                $(".mainMenu").addClass("hide");
                $(".levelSelect").removeClass("hide");
            });
 
            $(".levelSelect a").click( function () {
                level = $(this).attr("rel");
                $("h3").addClass("hide");
                $(".levelSelect").addClass("hide");
                $("#contentScreen").removeClass("hide");
                Init();
            });
          
        });
      
        
    </script>
</head>
<body>
    <div class="alignCenter">
        <h3>Cookie Math</h3>
    
        <div class="menu mainMenu">
           <a href="#" rel="+">Addition</a>
            <a href="#" rel="-">Subtraction</a>
            <a href="#" rel="*">Multiplication</a>
        </div>
        <div class="hide menu levelSelect">
          <a href="#" rel="1">Easy</a>
            <a href="#" rel="2">Medium</a>
            <a href="#" rel="3">I'm good</a>
         
        </div>
    </div>
    <div class="hide" id="contentScreen">
    	
    <div id="canvasContainer" style="border:1px solid red;width:800px;height:500px:"></div>
    	<div id="keyPadRow" class="absolute" ></div>
      	<input type="button" id="btnCalc" onclick="CheckAnswer()" value="Calculate" class="absolute"/>
      </div>
     <div id="imageHolder" class="hide absolute"></div>
</html>

